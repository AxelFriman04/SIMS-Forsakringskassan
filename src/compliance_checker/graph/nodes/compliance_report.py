# compliance_checker/graph/nodes/compliance_report.py

import json
from typing import Dict, Any
from compliance_checker.graph.state import GraphState
from shared.config import settings


class ComplianceReportNode:
    """
    Generates a structured compliance report
    """

    def __init__(self, state: GraphState):
        if not state:
            raise ValueError("ComplianceReportNode requires a GraphState object.")
        self.state = state

    def _generate_report(self) -> Dict[str, Any]:
        """Builds a structured compliance report using the state."""
        report = {
            "rag_answer": getattr(self.state, "answer", None),
            "verdict": getattr(self.state, "verdict", "Inconclusive"),
            "compliance_score": self.state.metrics_root_cause.get("compliance_score")
            if getattr(self.state, "metrics_root_cause", None)
            else None,
            "confidence": self.state.metrics_root_cause.get("confidence")
            if getattr(self.state, "metrics_root_cause", None)
            else 0.0,
            "root_causes": self.state.metrics_root_cause.get("root_causes")
            if getattr(self.state, "metrics_root_cause", None)
            else [],
            "metrics": getattr(self.state, "metrics_pipeline", {}),
            "claims": getattr(self.state, "claims", []),
            "verified_claims": getattr(self.state, "verified_claims", []),
            "summary": "Overall compliance verdict generated by the pipeline.",
        }
        return report

    def run(self) -> Dict[str, Any]:
        """Generates and returns the compliance report."""
        report = self._generate_report()

        if getattr(settings, "DEBUG", False):
            print("\n=== Compliance Report ===")
            print(json.dumps(report, indent=2))

        return report
